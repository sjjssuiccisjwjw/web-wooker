"""
EXEMPLO DE BOT DISCORD PARA GERAR KEYS PRIVADAS
Instale: pip install discord.py requests

Configure as vari√°veis:
- DISCORD_BOT_TOKEN: Token do seu bot Discord
- API_URL: URL do seu servidor (ex: https://seu-app.replit.app)
- API_SECRET: Sua chave secreta da API
"""

import discord
from discord.ext import commands
import requests
import os

# Configura√ß√µes
DISCORD_BOT_TOKEN = "SEU_BOT_TOKEN_AQUI"
API_URL = "https://seu-app.replit.app"  # Substitua pela URL do seu app
API_SECRET = "your-secret-api-key-here"  # Mesmo valor do app.py

# Configura√ß√£o do bot
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='/', intents=intents)

@bot.event
async def on_ready():
    print(f'{bot.user} conectado ao Discord!')

@bot.command(name='gerarkey')
async def gerar_key(ctx):
    """Comando /gerarkey - Gera uma key privada para o usu√°rio"""
    
    # Verificar se est√° no canal correto
    if ctx.channel.name != 'keys':
        await ctx.send("‚ùå Este comando s√≥ funciona no canal #keys")
        return
    
    try:
        # Dados do usu√°rio
        user_data = {
            'user_id': str(ctx.author.id),
            'username': ctx.author.display_name
        }
        
        # Headers com autentica√ß√£o
        headers = {
            'Authorization': f'Bearer {API_SECRET}',
            'Content-Type': 'application/json'
        }
        
        # Fazer requisi√ß√£o para gerar key privada
        response = requests.post(
            f'{API_URL}/api/generate-private-key',
            json=user_data,
            headers=headers,
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            key = data['key']
            expires = data['expires_formatted']
            
            # Enviar key por DM
            # Enviar key por DM usando webhook (mais confi√°vel)
            dm_message = (
                f"üîë **Sua Key Privada UNITED HUB**\n\n"
                f"**üéØ Key:** `{key}`\n"
                f"**‚è∞ Expira:** {expires}\n"
                f"**üïí Dura√ß√£o:** 24 horas\n\n"
                f"**üåê Site:** https://seu-app.replit.app\n\n"
                f"‚ö†Ô∏è **IMPORTANTE:** Mantenha sua key em segredo!\n"
                f"üë§ **Gerada para:** {ctx.author.display_name}"
            )
            
            try:
                # Tentar enviar DM primeiro
                await ctx.author.send(dm_message)
                
                # Responder no canal que a key foi enviada por DM
                await ctx.send(f"‚úÖ {ctx.author.mention}, sua key privada foi enviada por DM!")
                
            except discord.Forbidden:
                # Se n√£o conseguir enviar DM, avisar no canal
                await ctx.send(
                    f"‚ùå {ctx.author.mention}, n√£o consegui te enviar DM. "
                    f"Abra suas mensagens diretas e tente novamente."
                )
                
        else:
            await ctx.send("‚ùå Erro ao gerar key. Tente novamente.")
            
    except requests.exceptions.RequestException as e:
        print(f"Erro na API: {e}")
        await ctx.send("‚ùå Erro de conex√£o com o servidor. Tente novamente.")
    except Exception as e:
        print(f"Erro geral: {e}")
        await ctx.send("‚ùå Erro interno. Contate o administrador.")

@bot.command(name='limparkeys')
@commands.has_permissions(administrator=True)
async def limpar_keys(ctx):
    """Comando para administradores limparem keys expiradas"""
    
    try:
        response = requests.get(f'{API_URL}/cleanup-keys', timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            count = data['cleaned_keys']
            await ctx.send(f"üóëÔ∏è {count} keys expiradas foram removidas do banco.")
        else:
            await ctx.send("‚ùå Erro ao limpar keys expiradas.")
            
    except requests.exceptions.RequestException:
        await ctx.send("‚ùå Erro de conex√£o com o servidor.")

# Comando adicional para status do sistema
@bot.command(name='status')
@commands.has_permissions(administrator=True)
async def status_sistema(ctx):
    """Comando para verificar status do sistema"""
    
    try:
        # Testar conex√£o com API
        response = requests.get(f'{API_URL}/admin', timeout=5)
        
        if response.status_code == 200:
            await ctx.send("‚úÖ Sistema UNITED HUB online e funcionando!")
        else:
            await ctx.send(f"‚ö†Ô∏è Sistema retornou status: {response.status_code}")
            
    except requests.exceptions.RequestException:
        await ctx.send("‚ùå Sistema UNITED HUB offline ou inacess√≠vel.")

if __name__ == "__main__":
    # IMPORTANTE: Configure suas vari√°veis de ambiente ou substitua os valores
    if DISCORD_BOT_TOKEN == "SEU_BOT_TOKEN_AQUI":
        print("‚ùå Configure o DISCORD_BOT_TOKEN antes de executar!")
        exit(1)
    
    print("Iniciando bot Discord...")
    bot.run(DISCORD_BOT_TOKEN)